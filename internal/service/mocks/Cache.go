// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/himmel520/uoffer/require/models"
	mock "github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

type Cache_Expecter struct {
	mock *mock.Mock
}

func (_m *Cache) EXPECT() *Cache_Expecter {
	return &Cache_Expecter{mock: &_m.Mock}
}

// DeleteAnalyticWithWords provides a mock function with given fields: ctx, postID
func (_m *Cache) DeleteAnalyticWithWords(ctx context.Context, postID int) error {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAnalyticWithWords")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_DeleteAnalyticWithWords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAnalyticWithWords'
type Cache_DeleteAnalyticWithWords_Call struct {
	*mock.Call
}

// DeleteAnalyticWithWords is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int
func (_e *Cache_Expecter) DeleteAnalyticWithWords(ctx interface{}, postID interface{}) *Cache_DeleteAnalyticWithWords_Call {
	return &Cache_DeleteAnalyticWithWords_Call{Call: _e.mock.On("DeleteAnalyticWithWords", ctx, postID)}
}

func (_c *Cache_DeleteAnalyticWithWords_Call) Run(run func(ctx context.Context, postID int)) *Cache_DeleteAnalyticWithWords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *Cache_DeleteAnalyticWithWords_Call) Return(_a0 error) *Cache_DeleteAnalyticWithWords_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_DeleteAnalyticWithWords_Call) RunAndReturn(run func(context.Context, int) error) *Cache_DeleteAnalyticWithWords_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCategoriesWithPublicPosts provides a mock function with given fields: ctx
func (_m *Cache) DeleteCategoriesWithPublicPosts(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCategoriesWithPublicPosts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_DeleteCategoriesWithPublicPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCategoriesWithPublicPosts'
type Cache_DeleteCategoriesWithPublicPosts_Call struct {
	*mock.Call
}

// DeleteCategoriesWithPublicPosts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Cache_Expecter) DeleteCategoriesWithPublicPosts(ctx interface{}) *Cache_DeleteCategoriesWithPublicPosts_Call {
	return &Cache_DeleteCategoriesWithPublicPosts_Call{Call: _e.mock.On("DeleteCategoriesWithPublicPosts", ctx)}
}

func (_c *Cache_DeleteCategoriesWithPublicPosts_Call) Run(run func(ctx context.Context)) *Cache_DeleteCategoriesWithPublicPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Cache_DeleteCategoriesWithPublicPosts_Call) Return(_a0 error) *Cache_DeleteCategoriesWithPublicPosts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_DeleteCategoriesWithPublicPosts_Call) RunAndReturn(run func(context.Context) error) *Cache_DeleteCategoriesWithPublicPosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetAnalyticWithWords provides a mock function with given fields: ctx, postID
func (_m *Cache) GetAnalyticWithWords(ctx context.Context, postID int) (*models.AnalyticWithWords, error) {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for GetAnalyticWithWords")
	}

	var r0 *models.AnalyticWithWords
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.AnalyticWithWords, error)); ok {
		return rf(ctx, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.AnalyticWithWords); ok {
		r0 = rf(ctx, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AnalyticWithWords)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cache_GetAnalyticWithWords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAnalyticWithWords'
type Cache_GetAnalyticWithWords_Call struct {
	*mock.Call
}

// GetAnalyticWithWords is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int
func (_e *Cache_Expecter) GetAnalyticWithWords(ctx interface{}, postID interface{}) *Cache_GetAnalyticWithWords_Call {
	return &Cache_GetAnalyticWithWords_Call{Call: _e.mock.On("GetAnalyticWithWords", ctx, postID)}
}

func (_c *Cache_GetAnalyticWithWords_Call) Run(run func(ctx context.Context, postID int)) *Cache_GetAnalyticWithWords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *Cache_GetAnalyticWithWords_Call) Return(_a0 *models.AnalyticWithWords, _a1 error) *Cache_GetAnalyticWithWords_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Cache_GetAnalyticWithWords_Call) RunAndReturn(run func(context.Context, int) (*models.AnalyticWithWords, error)) *Cache_GetAnalyticWithWords_Call {
	_c.Call.Return(run)
	return _c
}

// GetCategoriesWithPublicPosts provides a mock function with given fields: ctx
func (_m *Cache) GetCategoriesWithPublicPosts(ctx context.Context) (map[string][]*models.PostResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCategoriesWithPublicPosts")
	}

	var r0 map[string][]*models.PostResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string][]*models.PostResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string][]*models.PostResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]*models.PostResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cache_GetCategoriesWithPublicPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCategoriesWithPublicPosts'
type Cache_GetCategoriesWithPublicPosts_Call struct {
	*mock.Call
}

// GetCategoriesWithPublicPosts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Cache_Expecter) GetCategoriesWithPublicPosts(ctx interface{}) *Cache_GetCategoriesWithPublicPosts_Call {
	return &Cache_GetCategoriesWithPublicPosts_Call{Call: _e.mock.On("GetCategoriesWithPublicPosts", ctx)}
}

func (_c *Cache_GetCategoriesWithPublicPosts_Call) Run(run func(ctx context.Context)) *Cache_GetCategoriesWithPublicPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Cache_GetCategoriesWithPublicPosts_Call) Return(_a0 map[string][]*models.PostResponse, _a1 error) *Cache_GetCategoriesWithPublicPosts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Cache_GetCategoriesWithPublicPosts_Call) RunAndReturn(run func(context.Context) (map[string][]*models.PostResponse, error)) *Cache_GetCategoriesWithPublicPosts_Call {
	_c.Call.Return(run)
	return _c
}

// SetAnalyticWithWords provides a mock function with given fields: ctx, data, postID
func (_m *Cache) SetAnalyticWithWords(ctx context.Context, data *models.AnalyticWithWords, postID int) error {
	ret := _m.Called(ctx, data, postID)

	if len(ret) == 0 {
		panic("no return value specified for SetAnalyticWithWords")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.AnalyticWithWords, int) error); ok {
		r0 = rf(ctx, data, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_SetAnalyticWithWords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAnalyticWithWords'
type Cache_SetAnalyticWithWords_Call struct {
	*mock.Call
}

// SetAnalyticWithWords is a helper method to define mock.On call
//   - ctx context.Context
//   - data *models.AnalyticWithWords
//   - postID int
func (_e *Cache_Expecter) SetAnalyticWithWords(ctx interface{}, data interface{}, postID interface{}) *Cache_SetAnalyticWithWords_Call {
	return &Cache_SetAnalyticWithWords_Call{Call: _e.mock.On("SetAnalyticWithWords", ctx, data, postID)}
}

func (_c *Cache_SetAnalyticWithWords_Call) Run(run func(ctx context.Context, data *models.AnalyticWithWords, postID int)) *Cache_SetAnalyticWithWords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.AnalyticWithWords), args[2].(int))
	})
	return _c
}

func (_c *Cache_SetAnalyticWithWords_Call) Return(_a0 error) *Cache_SetAnalyticWithWords_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_SetAnalyticWithWords_Call) RunAndReturn(run func(context.Context, *models.AnalyticWithWords, int) error) *Cache_SetAnalyticWithWords_Call {
	_c.Call.Return(run)
	return _c
}

// SetCategoriesWithPublicPosts provides a mock function with given fields: ctx, categories
func (_m *Cache) SetCategoriesWithPublicPosts(ctx context.Context, categories map[string][]*models.PostResponse) error {
	ret := _m.Called(ctx, categories)

	if len(ret) == 0 {
		panic("no return value specified for SetCategoriesWithPublicPosts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string][]*models.PostResponse) error); ok {
		r0 = rf(ctx, categories)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_SetCategoriesWithPublicPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCategoriesWithPublicPosts'
type Cache_SetCategoriesWithPublicPosts_Call struct {
	*mock.Call
}

// SetCategoriesWithPublicPosts is a helper method to define mock.On call
//   - ctx context.Context
//   - categories map[string][]*models.PostResponse
func (_e *Cache_Expecter) SetCategoriesWithPublicPosts(ctx interface{}, categories interface{}) *Cache_SetCategoriesWithPublicPosts_Call {
	return &Cache_SetCategoriesWithPublicPosts_Call{Call: _e.mock.On("SetCategoriesWithPublicPosts", ctx, categories)}
}

func (_c *Cache_SetCategoriesWithPublicPosts_Call) Run(run func(ctx context.Context, categories map[string][]*models.PostResponse)) *Cache_SetCategoriesWithPublicPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string][]*models.PostResponse))
	})
	return _c
}

func (_c *Cache_SetCategoriesWithPublicPosts_Call) Return(_a0 error) *Cache_SetCategoriesWithPublicPosts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_SetCategoriesWithPublicPosts_Call) RunAndReturn(run func(context.Context, map[string][]*models.PostResponse) error) *Cache_SetCategoriesWithPublicPosts_Call {
	_c.Call.Return(run)
	return _c
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
