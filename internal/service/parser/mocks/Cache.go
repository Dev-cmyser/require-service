// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/himmel520/uoffer/require/models"
	mock "github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

type Cache_Expecter struct {
	mock *mock.Mock
}

func (_m *Cache) EXPECT() *Cache_Expecter {
	return &Cache_Expecter{mock: &_m.Mock}
}

// SetAnalyticWithWords provides a mock function with given fields: ctx, data, postID
func (_m *Cache) SetAnalyticWithWords(ctx context.Context, data *models.AnalyticWithWords, postID int) error {
	ret := _m.Called(ctx, data, postID)

	if len(ret) == 0 {
		panic("no return value specified for SetAnalyticWithWords")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.AnalyticWithWords, int) error); ok {
		r0 = rf(ctx, data, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_SetAnalyticWithWords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAnalyticWithWords'
type Cache_SetAnalyticWithWords_Call struct {
	*mock.Call
}

// SetAnalyticWithWords is a helper method to define mock.On call
//   - ctx context.Context
//   - data *models.AnalyticWithWords
//   - postID int
func (_e *Cache_Expecter) SetAnalyticWithWords(ctx interface{}, data interface{}, postID interface{}) *Cache_SetAnalyticWithWords_Call {
	return &Cache_SetAnalyticWithWords_Call{Call: _e.mock.On("SetAnalyticWithWords", ctx, data, postID)}
}

func (_c *Cache_SetAnalyticWithWords_Call) Run(run func(ctx context.Context, data *models.AnalyticWithWords, postID int)) *Cache_SetAnalyticWithWords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.AnalyticWithWords), args[2].(int))
	})
	return _c
}

func (_c *Cache_SetAnalyticWithWords_Call) Return(_a0 error) *Cache_SetAnalyticWithWords_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_SetAnalyticWithWords_Call) RunAndReturn(run func(context.Context, *models.AnalyticWithWords, int) error) *Cache_SetAnalyticWithWords_Call {
	_c.Call.Return(run)
	return _c
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
