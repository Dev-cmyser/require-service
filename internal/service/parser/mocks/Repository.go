// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/himmel520/uoffer/require/models"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// GetAnalytics provides a mock function with given fields: ctx
func (_m *Repository) GetAnalytics(ctx context.Context) ([]*models.Analytic, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAnalytics")
	}

	var r0 []*models.Analytic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Analytic, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Analytic); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Analytic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetAnalytics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAnalytics'
type Repository_GetAnalytics_Call struct {
	*mock.Call
}

// GetAnalytics is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) GetAnalytics(ctx interface{}) *Repository_GetAnalytics_Call {
	return &Repository_GetAnalytics_Call{Call: _e.mock.On("GetAnalytics", ctx)}
}

func (_c *Repository_GetAnalytics_Call) Run(run func(ctx context.Context)) *Repository_GetAnalytics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_GetAnalytics_Call) Return(_a0 []*models.Analytic, _a1 error) *Repository_GetAnalytics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetAnalytics_Call) RunAndReturn(run func(context.Context) ([]*models.Analytic, error)) *Repository_GetAnalytics_Call {
	_c.Call.Return(run)
	return _c
}

// GetFilters provides a mock function with given fields: ctx
func (_m *Repository) GetFilters(ctx context.Context) ([]*models.Filter, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetFilters")
	}

	var r0 []*models.Filter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Filter, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Filter); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Filter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFilters'
type Repository_GetFilters_Call struct {
	*mock.Call
}

// GetFilters is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) GetFilters(ctx interface{}) *Repository_GetFilters_Call {
	return &Repository_GetFilters_Call{Call: _e.mock.On("GetFilters", ctx)}
}

func (_c *Repository_GetFilters_Call) Run(run func(ctx context.Context)) *Repository_GetFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_GetFilters_Call) Return(_a0 []*models.Filter, _a1 error) *Repository_GetFilters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetFilters_Call) RunAndReturn(run func(context.Context) ([]*models.Filter, error)) *Repository_GetFilters_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
