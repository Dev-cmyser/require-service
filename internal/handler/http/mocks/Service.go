// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/himmel520/uoffer/require/models"

	rsa "crypto/rsa"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// AddAnalytic provides a mock function with given fields: ctx, analytic
func (_m *Service) AddAnalytic(ctx context.Context, analytic *models.Analytic) (*models.Analytic, error) {
	ret := _m.Called(ctx, analytic)

	if len(ret) == 0 {
		panic("no return value specified for AddAnalytic")
	}

	var r0 *models.Analytic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Analytic) (*models.Analytic, error)); ok {
		return rf(ctx, analytic)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Analytic) *models.Analytic); ok {
		r0 = rf(ctx, analytic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Analytic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Analytic) error); ok {
		r1 = rf(ctx, analytic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_AddAnalytic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAnalytic'
type Service_AddAnalytic_Call struct {
	*mock.Call
}

// AddAnalytic is a helper method to define mock.On call
//   - ctx context.Context
//   - analytic *models.Analytic
func (_e *Service_Expecter) AddAnalytic(ctx interface{}, analytic interface{}) *Service_AddAnalytic_Call {
	return &Service_AddAnalytic_Call{Call: _e.mock.On("AddAnalytic", ctx, analytic)}
}

func (_c *Service_AddAnalytic_Call) Run(run func(ctx context.Context, analytic *models.Analytic)) *Service_AddAnalytic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Analytic))
	})
	return _c
}

func (_c *Service_AddAnalytic_Call) Return(_a0 *models.Analytic, _a1 error) *Service_AddAnalytic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_AddAnalytic_Call) RunAndReturn(run func(context.Context, *models.Analytic) (*models.Analytic, error)) *Service_AddAnalytic_Call {
	_c.Call.Return(run)
	return _c
}

// AddCategory provides a mock function with given fields: ctx, category
func (_m *Service) AddCategory(ctx context.Context, category *models.Category) (*models.Category, error) {
	ret := _m.Called(ctx, category)

	if len(ret) == 0 {
		panic("no return value specified for AddCategory")
	}

	var r0 *models.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Category) (*models.Category, error)); ok {
		return rf(ctx, category)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Category) *models.Category); ok {
		r0 = rf(ctx, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Category) error); ok {
		r1 = rf(ctx, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_AddCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCategory'
type Service_AddCategory_Call struct {
	*mock.Call
}

// AddCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - category *models.Category
func (_e *Service_Expecter) AddCategory(ctx interface{}, category interface{}) *Service_AddCategory_Call {
	return &Service_AddCategory_Call{Call: _e.mock.On("AddCategory", ctx, category)}
}

func (_c *Service_AddCategory_Call) Run(run func(ctx context.Context, category *models.Category)) *Service_AddCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Category))
	})
	return _c
}

func (_c *Service_AddCategory_Call) Return(_a0 *models.Category, _a1 error) *Service_AddCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_AddCategory_Call) RunAndReturn(run func(context.Context, *models.Category) (*models.Category, error)) *Service_AddCategory_Call {
	_c.Call.Return(run)
	return _c
}

// AddFilter provides a mock function with given fields: ctx, filter
func (_m *Service) AddFilter(ctx context.Context, filter string) (*models.Filter, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for AddFilter")
	}

	var r0 *models.Filter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Filter, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Filter); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Filter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_AddFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFilter'
type Service_AddFilter_Call struct {
	*mock.Call
}

// AddFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter string
func (_e *Service_Expecter) AddFilter(ctx interface{}, filter interface{}) *Service_AddFilter_Call {
	return &Service_AddFilter_Call{Call: _e.mock.On("AddFilter", ctx, filter)}
}

func (_c *Service_AddFilter_Call) Run(run func(ctx context.Context, filter string)) *Service_AddFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Service_AddFilter_Call) Return(_a0 *models.Filter, _a1 error) *Service_AddFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_AddFilter_Call) RunAndReturn(run func(context.Context, string) (*models.Filter, error)) *Service_AddFilter_Call {
	_c.Call.Return(run)
	return _c
}

// AddPost provides a mock function with given fields: ctx, post
func (_m *Service) AddPost(ctx context.Context, post *models.Post) (*models.PostResponse, error) {
	ret := _m.Called(ctx, post)

	if len(ret) == 0 {
		panic("no return value specified for AddPost")
	}

	var r0 *models.PostResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Post) (*models.PostResponse, error)); ok {
		return rf(ctx, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Post) *models.PostResponse); ok {
		r0 = rf(ctx, post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PostResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Post) error); ok {
		r1 = rf(ctx, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_AddPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPost'
type Service_AddPost_Call struct {
	*mock.Call
}

// AddPost is a helper method to define mock.On call
//   - ctx context.Context
//   - post *models.Post
func (_e *Service_Expecter) AddPost(ctx interface{}, post interface{}) *Service_AddPost_Call {
	return &Service_AddPost_Call{Call: _e.mock.On("AddPost", ctx, post)}
}

func (_c *Service_AddPost_Call) Run(run func(ctx context.Context, post *models.Post)) *Service_AddPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Post))
	})
	return _c
}

func (_c *Service_AddPost_Call) Return(_a0 *models.PostResponse, _a1 error) *Service_AddPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_AddPost_Call) RunAndReturn(run func(context.Context, *models.Post) (*models.PostResponse, error)) *Service_AddPost_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAnalytic provides a mock function with given fields: ctx, id
func (_m *Service) DeleteAnalytic(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAnalytic")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_DeleteAnalytic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAnalytic'
type Service_DeleteAnalytic_Call struct {
	*mock.Call
}

// DeleteAnalytic is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *Service_Expecter) DeleteAnalytic(ctx interface{}, id interface{}) *Service_DeleteAnalytic_Call {
	return &Service_DeleteAnalytic_Call{Call: _e.mock.On("DeleteAnalytic", ctx, id)}
}

func (_c *Service_DeleteAnalytic_Call) Run(run func(ctx context.Context, id int)) *Service_DeleteAnalytic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *Service_DeleteAnalytic_Call) Return(_a0 error) *Service_DeleteAnalytic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_DeleteAnalytic_Call) RunAndReturn(run func(context.Context, int) error) *Service_DeleteAnalytic_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCacheCategoriesAndPosts provides a mock function with given fields: ctx
func (_m *Service) DeleteCacheCategoriesAndPosts(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCacheCategoriesAndPosts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_DeleteCacheCategoriesAndPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCacheCategoriesAndPosts'
type Service_DeleteCacheCategoriesAndPosts_Call struct {
	*mock.Call
}

// DeleteCacheCategoriesAndPosts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Service_Expecter) DeleteCacheCategoriesAndPosts(ctx interface{}) *Service_DeleteCacheCategoriesAndPosts_Call {
	return &Service_DeleteCacheCategoriesAndPosts_Call{Call: _e.mock.On("DeleteCacheCategoriesAndPosts", ctx)}
}

func (_c *Service_DeleteCacheCategoriesAndPosts_Call) Run(run func(ctx context.Context)) *Service_DeleteCacheCategoriesAndPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Service_DeleteCacheCategoriesAndPosts_Call) Return(_a0 error) *Service_DeleteCacheCategoriesAndPosts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_DeleteCacheCategoriesAndPosts_Call) RunAndReturn(run func(context.Context) error) *Service_DeleteCacheCategoriesAndPosts_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCategory provides a mock function with given fields: ctx, category
func (_m *Service) DeleteCategory(ctx context.Context, category string) error {
	ret := _m.Called(ctx, category)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_DeleteCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCategory'
type Service_DeleteCategory_Call struct {
	*mock.Call
}

// DeleteCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - category string
func (_e *Service_Expecter) DeleteCategory(ctx interface{}, category interface{}) *Service_DeleteCategory_Call {
	return &Service_DeleteCategory_Call{Call: _e.mock.On("DeleteCategory", ctx, category)}
}

func (_c *Service_DeleteCategory_Call) Run(run func(ctx context.Context, category string)) *Service_DeleteCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Service_DeleteCategory_Call) Return(_a0 error) *Service_DeleteCategory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_DeleteCategory_Call) RunAndReturn(run func(context.Context, string) error) *Service_DeleteCategory_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFilter provides a mock function with given fields: ctx, word
func (_m *Service) DeleteFilter(ctx context.Context, word string) error {
	ret := _m.Called(ctx, word)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFilter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, word)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_DeleteFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFilter'
type Service_DeleteFilter_Call struct {
	*mock.Call
}

// DeleteFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - word string
func (_e *Service_Expecter) DeleteFilter(ctx interface{}, word interface{}) *Service_DeleteFilter_Call {
	return &Service_DeleteFilter_Call{Call: _e.mock.On("DeleteFilter", ctx, word)}
}

func (_c *Service_DeleteFilter_Call) Run(run func(ctx context.Context, word string)) *Service_DeleteFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Service_DeleteFilter_Call) Return(_a0 error) *Service_DeleteFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_DeleteFilter_Call) RunAndReturn(run func(context.Context, string) error) *Service_DeleteFilter_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePost provides a mock function with given fields: ctx, id
func (_m *Service) DeletePost(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_DeletePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePost'
type Service_DeletePost_Call struct {
	*mock.Call
}

// DeletePost is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *Service_Expecter) DeletePost(ctx interface{}, id interface{}) *Service_DeletePost_Call {
	return &Service_DeletePost_Call{Call: _e.mock.On("DeletePost", ctx, id)}
}

func (_c *Service_DeletePost_Call) Run(run func(ctx context.Context, id int)) *Service_DeletePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *Service_DeletePost_Call) Return(_a0 error) *Service_DeletePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_DeletePost_Call) RunAndReturn(run func(context.Context, int) error) *Service_DeletePost_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCategories provides a mock function with given fields: ctx
func (_m *Service) GetAllCategories(ctx context.Context) ([]*models.Category, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCategories")
	}

	var r0 []*models.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Category, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Category); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetAllCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCategories'
type Service_GetAllCategories_Call struct {
	*mock.Call
}

// GetAllCategories is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Service_Expecter) GetAllCategories(ctx interface{}) *Service_GetAllCategories_Call {
	return &Service_GetAllCategories_Call{Call: _e.mock.On("GetAllCategories", ctx)}
}

func (_c *Service_GetAllCategories_Call) Run(run func(ctx context.Context)) *Service_GetAllCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Service_GetAllCategories_Call) Return(_a0 []*models.Category, _a1 error) *Service_GetAllCategories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetAllCategories_Call) RunAndReturn(run func(context.Context) ([]*models.Category, error)) *Service_GetAllCategories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAnalyticWithWords provides a mock function with given fields: ctx, postID, role
func (_m *Service) GetAnalyticWithWords(ctx context.Context, postID int, role string) (*models.AnalyticWithWords, error) {
	ret := _m.Called(ctx, postID, role)

	if len(ret) == 0 {
		panic("no return value specified for GetAnalyticWithWords")
	}

	var r0 *models.AnalyticWithWords
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (*models.AnalyticWithWords, error)); ok {
		return rf(ctx, postID, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) *models.AnalyticWithWords); ok {
		r0 = rf(ctx, postID, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AnalyticWithWords)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, postID, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetAnalyticWithWords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAnalyticWithWords'
type Service_GetAnalyticWithWords_Call struct {
	*mock.Call
}

// GetAnalyticWithWords is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int
//   - role string
func (_e *Service_Expecter) GetAnalyticWithWords(ctx interface{}, postID interface{}, role interface{}) *Service_GetAnalyticWithWords_Call {
	return &Service_GetAnalyticWithWords_Call{Call: _e.mock.On("GetAnalyticWithWords", ctx, postID, role)}
}

func (_c *Service_GetAnalyticWithWords_Call) Run(run func(ctx context.Context, postID int, role string)) *Service_GetAnalyticWithWords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *Service_GetAnalyticWithWords_Call) Return(_a0 *models.AnalyticWithWords, _a1 error) *Service_GetAnalyticWithWords_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetAnalyticWithWords_Call) RunAndReturn(run func(context.Context, int, string) (*models.AnalyticWithWords, error)) *Service_GetAnalyticWithWords_Call {
	_c.Call.Return(run)
	return _c
}

// GetCategoriesWithPosts provides a mock function with given fields: ctx
func (_m *Service) GetCategoriesWithPosts(ctx context.Context) (map[string][]*models.PostResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCategoriesWithPosts")
	}

	var r0 map[string][]*models.PostResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string][]*models.PostResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string][]*models.PostResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]*models.PostResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetCategoriesWithPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCategoriesWithPosts'
type Service_GetCategoriesWithPosts_Call struct {
	*mock.Call
}

// GetCategoriesWithPosts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Service_Expecter) GetCategoriesWithPosts(ctx interface{}) *Service_GetCategoriesWithPosts_Call {
	return &Service_GetCategoriesWithPosts_Call{Call: _e.mock.On("GetCategoriesWithPosts", ctx)}
}

func (_c *Service_GetCategoriesWithPosts_Call) Run(run func(ctx context.Context)) *Service_GetCategoriesWithPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Service_GetCategoriesWithPosts_Call) Return(_a0 map[string][]*models.PostResponse, _a1 error) *Service_GetCategoriesWithPosts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetCategoriesWithPosts_Call) RunAndReturn(run func(context.Context) (map[string][]*models.PostResponse, error)) *Service_GetCategoriesWithPosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetCategoriesWithPublicPosts provides a mock function with given fields: ctx
func (_m *Service) GetCategoriesWithPublicPosts(ctx context.Context) (map[string][]*models.PostResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCategoriesWithPublicPosts")
	}

	var r0 map[string][]*models.PostResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string][]*models.PostResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string][]*models.PostResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]*models.PostResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetCategoriesWithPublicPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCategoriesWithPublicPosts'
type Service_GetCategoriesWithPublicPosts_Call struct {
	*mock.Call
}

// GetCategoriesWithPublicPosts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Service_Expecter) GetCategoriesWithPublicPosts(ctx interface{}) *Service_GetCategoriesWithPublicPosts_Call {
	return &Service_GetCategoriesWithPublicPosts_Call{Call: _e.mock.On("GetCategoriesWithPublicPosts", ctx)}
}

func (_c *Service_GetCategoriesWithPublicPosts_Call) Run(run func(ctx context.Context)) *Service_GetCategoriesWithPublicPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Service_GetCategoriesWithPublicPosts_Call) Return(_a0 map[string][]*models.PostResponse, _a1 error) *Service_GetCategoriesWithPublicPosts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetCategoriesWithPublicPosts_Call) RunAndReturn(run func(context.Context) (map[string][]*models.PostResponse, error)) *Service_GetCategoriesWithPublicPosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetFilters provides a mock function with given fields: ctx, limit, offset
func (_m *Service) GetFilters(ctx context.Context, limit int, offset int) (*models.FilterResp, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetFilters")
	}

	var r0 *models.FilterResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (*models.FilterResp, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *models.FilterResp); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FilterResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFilters'
type Service_GetFilters_Call struct {
	*mock.Call
}

// GetFilters is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - offset int
func (_e *Service_Expecter) GetFilters(ctx interface{}, limit interface{}, offset interface{}) *Service_GetFilters_Call {
	return &Service_GetFilters_Call{Call: _e.mock.On("GetFilters", ctx, limit, offset)}
}

func (_c *Service_GetFilters_Call) Run(run func(ctx context.Context, limit int, offset int)) *Service_GetFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *Service_GetFilters_Call) Return(_a0 *models.FilterResp, _a1 error) *Service_GetFilters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetFilters_Call) RunAndReturn(run func(context.Context, int, int) (*models.FilterResp, error)) *Service_GetFilters_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRoleFromToken provides a mock function with given fields: jwtToken, publicKey
func (_m *Service) GetUserRoleFromToken(jwtToken string, publicKey *rsa.PublicKey) (string, error) {
	ret := _m.Called(jwtToken, publicKey)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoleFromToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *rsa.PublicKey) (string, error)); ok {
		return rf(jwtToken, publicKey)
	}
	if rf, ok := ret.Get(0).(func(string, *rsa.PublicKey) string); ok {
		r0 = rf(jwtToken, publicKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, *rsa.PublicKey) error); ok {
		r1 = rf(jwtToken, publicKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetUserRoleFromToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRoleFromToken'
type Service_GetUserRoleFromToken_Call struct {
	*mock.Call
}

// GetUserRoleFromToken is a helper method to define mock.On call
//   - jwtToken string
//   - publicKey *rsa.PublicKey
func (_e *Service_Expecter) GetUserRoleFromToken(jwtToken interface{}, publicKey interface{}) *Service_GetUserRoleFromToken_Call {
	return &Service_GetUserRoleFromToken_Call{Call: _e.mock.On("GetUserRoleFromToken", jwtToken, publicKey)}
}

func (_c *Service_GetUserRoleFromToken_Call) Run(run func(jwtToken string, publicKey *rsa.PublicKey)) *Service_GetUserRoleFromToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*rsa.PublicKey))
	})
	return _c
}

func (_c *Service_GetUserRoleFromToken_Call) Return(_a0 string, _a1 error) *Service_GetUserRoleFromToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetUserRoleFromToken_Call) RunAndReturn(run func(string, *rsa.PublicKey) (string, error)) *Service_GetUserRoleFromToken_Call {
	_c.Call.Return(run)
	return _c
}

// IsUserAuthorized provides a mock function with given fields: requiredRole, userRole
func (_m *Service) IsUserAuthorized(requiredRole string, userRole string) bool {
	ret := _m.Called(requiredRole, userRole)

	if len(ret) == 0 {
		panic("no return value specified for IsUserAuthorized")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(requiredRole, userRole)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Service_IsUserAuthorized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUserAuthorized'
type Service_IsUserAuthorized_Call struct {
	*mock.Call
}

// IsUserAuthorized is a helper method to define mock.On call
//   - requiredRole string
//   - userRole string
func (_e *Service_Expecter) IsUserAuthorized(requiredRole interface{}, userRole interface{}) *Service_IsUserAuthorized_Call {
	return &Service_IsUserAuthorized_Call{Call: _e.mock.On("IsUserAuthorized", requiredRole, userRole)}
}

func (_c *Service_IsUserAuthorized_Call) Run(run func(requiredRole string, userRole string)) *Service_IsUserAuthorized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Service_IsUserAuthorized_Call) Return(_a0 bool) *Service_IsUserAuthorized_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_IsUserAuthorized_Call) RunAndReturn(run func(string, string) bool) *Service_IsUserAuthorized_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAnalytic provides a mock function with given fields: ctx, id, analytic
func (_m *Service) UpdateAnalytic(ctx context.Context, id int, analytic *models.AnalyticUpdate) (*models.Analytic, error) {
	ret := _m.Called(ctx, id, analytic)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAnalytic")
	}

	var r0 *models.Analytic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *models.AnalyticUpdate) (*models.Analytic, error)); ok {
		return rf(ctx, id, analytic)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *models.AnalyticUpdate) *models.Analytic); ok {
		r0 = rf(ctx, id, analytic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Analytic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *models.AnalyticUpdate) error); ok {
		r1 = rf(ctx, id, analytic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_UpdateAnalytic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAnalytic'
type Service_UpdateAnalytic_Call struct {
	*mock.Call
}

// UpdateAnalytic is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - analytic *models.AnalyticUpdate
func (_e *Service_Expecter) UpdateAnalytic(ctx interface{}, id interface{}, analytic interface{}) *Service_UpdateAnalytic_Call {
	return &Service_UpdateAnalytic_Call{Call: _e.mock.On("UpdateAnalytic", ctx, id, analytic)}
}

func (_c *Service_UpdateAnalytic_Call) Run(run func(ctx context.Context, id int, analytic *models.AnalyticUpdate)) *Service_UpdateAnalytic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*models.AnalyticUpdate))
	})
	return _c
}

func (_c *Service_UpdateAnalytic_Call) Return(_a0 *models.Analytic, _a1 error) *Service_UpdateAnalytic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_UpdateAnalytic_Call) RunAndReturn(run func(context.Context, int, *models.AnalyticUpdate) (*models.Analytic, error)) *Service_UpdateAnalytic_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCategory provides a mock function with given fields: ctx, category, title
func (_m *Service) UpdateCategory(ctx context.Context, category string, title string) (*models.Category, error) {
	ret := _m.Called(ctx, category, title)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCategory")
	}

	var r0 *models.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.Category, error)); ok {
		return rf(ctx, category, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Category); ok {
		r0 = rf(ctx, category, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, category, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_UpdateCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCategory'
type Service_UpdateCategory_Call struct {
	*mock.Call
}

// UpdateCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - category string
//   - title string
func (_e *Service_Expecter) UpdateCategory(ctx interface{}, category interface{}, title interface{}) *Service_UpdateCategory_Call {
	return &Service_UpdateCategory_Call{Call: _e.mock.On("UpdateCategory", ctx, category, title)}
}

func (_c *Service_UpdateCategory_Call) Run(run func(ctx context.Context, category string, title string)) *Service_UpdateCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Service_UpdateCategory_Call) Return(_a0 *models.Category, _a1 error) *Service_UpdateCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_UpdateCategory_Call) RunAndReturn(run func(context.Context, string, string) (*models.Category, error)) *Service_UpdateCategory_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePost provides a mock function with given fields: ctx, id, post
func (_m *Service) UpdatePost(ctx context.Context, id int, post *models.PostUpdate) (*models.PostResponse, error) {
	ret := _m.Called(ctx, id, post)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 *models.PostResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *models.PostUpdate) (*models.PostResponse, error)); ok {
		return rf(ctx, id, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *models.PostUpdate) *models.PostResponse); ok {
		r0 = rf(ctx, id, post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PostResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *models.PostUpdate) error); ok {
		r1 = rf(ctx, id, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_UpdatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePost'
type Service_UpdatePost_Call struct {
	*mock.Call
}

// UpdatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - post *models.PostUpdate
func (_e *Service_Expecter) UpdatePost(ctx interface{}, id interface{}, post interface{}) *Service_UpdatePost_Call {
	return &Service_UpdatePost_Call{Call: _e.mock.On("UpdatePost", ctx, id, post)}
}

func (_c *Service_UpdatePost_Call) Run(run func(ctx context.Context, id int, post *models.PostUpdate)) *Service_UpdatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*models.PostUpdate))
	})
	return _c
}

func (_c *Service_UpdatePost_Call) Return(_a0 *models.PostResponse, _a1 error) *Service_UpdatePost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_UpdatePost_Call) RunAndReturn(run func(context.Context, int, *models.PostUpdate) (*models.PostResponse, error)) *Service_UpdatePost_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
